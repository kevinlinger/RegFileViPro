#!/usr/bin/env perl

###############
# Author: Satya
# This is a top-level file for the characterizer. It is a wrapper around the original top-level file run.pl, which could only run the characterizer for one technology at a time. This script enables the user to run tests for different technologies at once and plot trends across technologies.
###############

use strict;
use Switch;
use File::Basename;

#############
# Help text #
#############
my $help = "\nThis is the wrapper script for the characterization engine. Use the following options-

  -c : list of tests for which you want to collect data for. The data needs to be generated by the plotGen.m file and written to data.txt in the top level folder for a test. A table of the results is generated and the trends across the techs specified are plotted for each test. Use the -f option to specify the tech list. There is no need to differentiate between .scs and .ocn tests. For example, a sample test list would look like:

IDVD_N
SRAM_WM_SNM
SRAM_RSNM
leakage_N

  -d : list of data required from the simulation output. In each line, specify the operations you would like to perform and the data file. For example,

mean std /home/svn2u/SRAM_TOOL/trunk/device/BIN/svn2u_lpptm22/Ioff_vs_VDS_P/DAT/dc_P1_PX_d.dat
max /home/svn2u/SRAM_TOOL/trunk/device/BIN/svn2u_lpptm22/leakage_N/DAT/dc_N1_NX_d.dat

This option can be run standalone, i.e, data collection across technologies can be done separately from the actual sims.

  -f : list of technologies - In the list, specify the technology name, one per line. The tech name should have a corresponding .ini file in the template directory. For example, a sample list would look like:

ibm45
st90
ptm32
ptm22

 -h ; see this help

 -noimgpdf : use this option if you don't want plots and output pdf to be produced

 -norun : use this option if you just want to collect data and plot trends.

If you are running the Characterization Engine to get some specific data and don't need the plots or the pdf, use the -noimgpdf option to speed up the execution\n\n";

##############################
# Parse Command Line Options #
##############################
my $i = 0;
my $command = $0;

my ($fileName,$pathToTop) = fileparse($command);
my $usr = getlogin();
my $configList;
my $reqData;
my $trendData;
my $onlySim = 0;
my $runCE = 1;
my @configPaths;
my @tests;


while ($i<=$#ARGV) {
	if ($ARGV[$i] eq '-f') {
		$configList = $ARGV[$i + 1];
		chomp $configList;
		$i = $i + 2;
	} elsif ($ARGV[$i] eq '-h') {
		print $help;
		exit();
	} elsif ($ARGV[$i] eq '-d') {
		$reqData = $ARGV[$i + 1];
		chomp $reqData;
		$i = $i + 2;
	} elsif ($ARGV[$i] eq '-c') {
		$trendData = $ARGV[$i + 1];
		chomp $trendData;
                $i = $i + 2;
	} elsif ($ARGV[$i] eq '-noimgpdf') {
		$onlySim = 1;
		$i = $i + 1;
	} elsif ($ARGV[$i] eq '-norun') {
		$runCE = 0;
		$i = $i + 1;
	} else {
		print "*ERROR* INVALID OPTION FLAG FOUND. \n";
		print $help;
		exit();
	}
}

###############################################
# Run CE for each pdk specified in input file #
###############################################
if ($configList =~ /\S+/ && $configList ne '-d' && $configList ne '-c') {
	runCE($configList);
} else {
	print "*NOTICE* No tech list passed. No simulations will be run.\n\n";
} 

###############################################
# Process test results to get requested data  #
###############################################
if ($reqData =~ /\S+/ && $reqData ne '-f' && $reqData ne '-c') {
	print "Processing simulation output for requested data\n";
	getCEdata($reqData);
}

#################################################
# Collect data to create a trend table and plot #
#################################################
if ($trendData =~ /\S+/ && $trendData ne '-f' && $trendData ne '-d') {
	print "Initializing Creation of Trend Table and Plots...\n";
	getTrends($trendData);
	print "Table of data created at table.txt\n";

	system("mkdir -p IMG_TRENDS") == 0 or die "Couldn't create dir for images $!\n";;

	#Parse generated table and plot trends
	parseAndPlot();
}

#########################################
##                                     ##
##   H E L P E R   F U N C T I O N S   ##
##                                     ##
#########################################

sub runCE {
	my $configList = $_[0];
	open(FILE, "$configList") or die(
	"*ERROR* Unable to open the Config list - $configList.\nPlease make sure the path to the list provided is correct. \n"
	);
	@configPaths = <FILE>;
	close (FILE);
	
	my $tech;

	if ($runCE) {
		print "Starting the Characterization Engine...\n";
		foreach $tech (@configPaths) {
			chomp $tech;

			#ignore blank lines
			next if($tech =~ /^$/);

			$tech =~ s/\s+//;
			print "\nCharacterizing for $tech...\n";
			my $fullPath = "../../template/".$tech.".ini";
			my $status;


			if ($onlySim) {
	        		$status =  system("perl $pathToTop/run.pl -nopdf -i $fullPath\n");
			}
			else {
				$status =  system("perl $pathToTop/run.pl -i $fullPath\n");
			}

			if ($status) {
				print "\n*ERROR* Characterization Engine Failed for $tech. Make sure that the technologies specified in the list are correct. If they are correct, it might be a spectre or ocean problem. Please check the log files at $usr/<TEST NAME>/<ocean or spectre>.log\n";
				print "\n Running the Engine for the next path in the list \n\n";
			}	
			print "\n Moving the data for $tech to ${usr}_${tech}\n\n";
			system("rm -rf $pathToTop/${usr}_${tech}");
			$status = system("mv $pathToTop/$usr $pathToTop/${usr}_${tech}"); 
			if ($status) {
				print "\n *ERROR* Cannot rename the output directory for $tech. The directory $pathToTop/${usr}_${tech} may already exist.\n\n";
				exit();
			}
		}
	}
}

sub getCEdata {
	my $reqData = $_[0];
	open(FILE, "$reqData") or die("Cannot open file containing data request. $!\n");
	my @dataList = <FILE>;
	close(FILE);

	# Create .m file for getting required data
	open (FILE, ">getData.m") or die("Cannot open matlab file for writing. $!\n");
	print FILE "%open file to Write output data\n";
	print FILE "fid = fopen('outData.txt', 'wt');\n\n";
	
	my $data;
	my @outputValues;
	
	foreach $data (@dataList) {
	        my @values = split(' ', $data);
	        my $datFile = pop(@values);
	        my ($datFileName,$datFileDir) = fileparse($datFile);
	        $datFileName =~ s/\.dat//;
	        my @ops = @values;

	        print FILE "%load data file\n";
	        print FILE "load (\'$datFile\');\n";
	        my $op;
	        print FILE "\n%calculate required values\n";
	        foreach $op (@ops) {
	                print FILE "${op}_${datFileName} = $op($datFileName);\n";
	                print FILE "fprintf(fid, \'${op}_${datFileName} = %f\\n\', ${op}_${datFileName});\n";
	        }
	        print FILE "\n";
	}
	print FILE "fclose(fid);\nexit;\n";
	close(FILE);
	
	# Run the created .m file
	my $cmd = "matlab -nosplash -nojvm -r getData &>  matlab.log";
	print "Executing matlab script to calculate requested data...\n";

	system($cmd) == 0 or die "Matlab script failed. Check matlab.log file for details. $!\n";
}

sub getTrends {

	my $testList = $_[0];

	my @values;
	my @lines;
	my $tech;
	my $test;
	my $value;
	my $fileName;
	my $numResults;
	my $numTechs;

	open(FILE, $testList) or die "Cannot open test list $!\n";
	@tests = <FILE>;
	close FILE;

	open(TABLE, ">table.txt") or die "Cannot open file to write table $!\n";
	print TABLE "\t\t";
	foreach $tech (@configPaths) {
		chomp $tech;
		print TABLE "$tech\t";
	}
	print TABLE "\n";

	foreach $test (@tests) {
	
		chomp $test;
		@values = ();

		#ignore blank lines
		next if($test =~ /^$/);

		$test =~ s/\s+//;	
		print "Getting data for $test\n";
		print TABLE "$test\t";
		foreach $tech (@configPaths) {

			chomp $tech;
			
			#ignore blank lines
			next if($tech =~ /^$/);

			$tech =~ s/\s+//;
			$fileName = "${pathToTop}${usr}_${tech}/$test/data.txt";
			open(FILE, $fileName) or die "Cannot open data file. Make sure the test produces the data value to be captured and plotted across techs $!\n";
			@lines = <FILE>;
			close FILE;
			
			chomp($lines[0]);
			push(@values, split(/\s+/, $lines[0]));
				
		}
		
		if ($#values == $#configPaths) {
			foreach $value(@values) {
				print TABLE "$value\t\t";
			}
		} else {
			$numTechs = $#configPaths + 1;
			$numResults = ($#values + 1)/$numTechs;
			for (my $count1 = 1; $count1 <= $numResults; $count1++) {
				for(my $count2 = 1; $count2 <= $numTechs; $count2++) {
					print TABLE "$values[$numResults*($count2 - 1) - 1 +$count1]\t\t";
				}
				print TABLE "\n";
				print TABLE "\t\t";
			}
		}

		print TABLE "\n";
	}
	close TABLE;
}

sub parseAndPlot {

	open(FILE,"table.txt") or die "$!\n";
	my @lines = <FILE>;
	close FILE;
	
	my @techs = @configPaths;
	my $tech;

	foreach $tech(@techs) {
		$tech =~ s/\D+//g;
	}

	open(MFILE, ">plotTrends.m") or die "Could not open Mfile for writing script to plot trends $!\n";
	print MFILE "techs = [@techs];\n\n";
	close MFILE;

	my $line;
	my $test;
	my @values;
	my $figCount = 1;
	my $dataCount = 1;

	shift @lines;

	foreach $line (@lines) {

		if ($line =~ /^\w+\s+/) {
			@values = split(/\s+/, $line);
			$test = shift @values;
			$dataCount = 1;
			
			writeMfile($test,$figCount,$dataCount,@values);
			$figCount++;
			$dataCount++;
		}

		if ($line =~ /^\s+\d/) {
			@values =  split(/\s+/, $line);
			shift @values;

			writeMfile($test,$figCount,$dataCount,@values);
			$figCount++;
			$dataCount++;
		}
	}

	open(MFILE, ">>plotTrends.m") or die "Could not open Mfile for writing script to plot trends $!\n";
	print MFILE "exit();\n";
	close MFILE;

	system("matlab -nojvm -nosplash -r plotTrends &> plotTrends.log") == 0 or die "Couldn't execute plotTrends.m $!\n";
}

sub writeMfile {

	my $testName = shift;
	my $figNum = shift;
	my $dataNum = shift;
	my @values = @_;

	open(MFILE, ">>plotTrends.m") or die "Could not open Mfile for writing script to plot trends $!\n";
	
	print MFILE "data$dataNum = [@values];\n";
	print MFILE "f$figNum = figure($figNum);\n";
	print MFILE "h$figNum = plot(techs, data$dataNum, \'ro\');\n";
	print MFILE "set(h$figNum, \'linewidth\', 2);\n";
	print MFILE "set(gca, \'fontsize\',10, \'xgrid\',\'on\',\'ygrid\',\'on\',\'fontweight\',\'bold\');\n";
	print MFILE "xlabel(\'Technologies\',\'fontweight\',\'bold\');\n";
	print MFILE "ylabel(\'Data$dataNum\',\'fontweight\',\'bold\');\n";
	print MFILE "title(\'$testName\',\'fontsize\',10);\n";
	print MFILE "print(f$figNum, \'-dtiff\',\'-r300\',\'IMG_TRENDS\/${testName}_Data$dataNum.tiff\');\n";
	print MFILE "print(f$figNum, \'-depsc\',\'IMG_TRENDS\/${testName}_Data$dataNum.eps\');\n";
	print MFILE "close(f$figNum);\n\n";
	close MFILE;
}
